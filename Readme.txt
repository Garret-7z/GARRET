하앗!

깃허브 친구는 유니티에 최적화 되어 있는 친구는 아니지만 프로젝트 공유 프로그램으로는 원톱이라 많이 쓰이고 있습니다.
유니티에 최적화가 안되어 있고 깃허브 특성상 까딱하면 프로젝트가 공중분해 되는 경우가 있으니 주의 사항을 잘 숙지해 주세요!

깃허브 단어, 사용법

- 커밋 : 우리가 작업하는 프로젝트의 버전 단위라고 보면 됨. 

1. Change 
깃허브 프로그램을 키면 왼쪽에 Change 항목이 있고 History 항목이 있습니다.
Change는 예전 프로젝트 버전과 현재 버전과 다른 점이 있는지 없는지 알려줌니다.
에를 들자면 어제 작업했던 프로젝트를 버전A 라고 합시다. 오늘 작업한 프로젝트를 B버전 B라고 합시다.
작업하기전 깃허브를 키면 Change에는 딱히 아무것도 안뜰겁니다. 하지만 오늘 작업후에 보면 초록색으로 뭔가가 막 적혀있는걸
볼 수 있습니다. 그게 현재 바뀐 점입니다. 그 아래에 보면 Summary 텍스트 박스와 Description 텍스트 박스  Commit 버튼이 있습니다.
Summary는 작업한 커밋의 제목을 써주시면 되고 Description 커밋의 설명란 입니다. 모두 올바르게 커밋이 작성된 걸 확인하면
Commit 버튼을 누르면 됩니다. Commit to master 버튼을 누르면 오늘 작업한걸 깃허브( 데스크톱 )에 올리게 되는 겁니다.

2. History 
히스토리에는 말 그대로 커밋들의 과거를 볼 수 있습니다. 요건 사실 잘 써본적이 없음 날라갈까봐 무서움 ㅠㅠㅠㅠ

3. Fetch origin
위쪽에 검은색 항목을 보시면 Fetch origin라는게 있습니다.
이걸 누르셔야 커밋된 걸 깃허브 (서버)에 올라가집니다.
Fetch origin을 서버에 올리는 걸 Push라고 합니다. 

그냥 커밋 버튼만 누르시면 데스크톱에서만 업데이트 된거고 서버에는 안올라가 집니다!
그러니 꼭 꼭 커밋하시고 푸쉬 해주세요!!

>>>주의사항<<<
1. 일을 시작하기 전에는 프로젝트 버전을 맞춰야 합니다. 안그러면 충돌이 일어나서 작업했던게 날아가거나 이상하게 수정될 수 있습니다. 
버전을 맞추는 방법은 그냥 프로젝트 시작하기 전에 깃허브 켜서 Fetch origin누르시면 됩니다. ( 아직 확실하진 않아서 확인 작업 해봐야함 ) 

2. 같은 스크립트를 수정 하지 않는다. 
A라는 스크립트를 작성중인데 다른 사람도 A를 작성하고 있다면 충돌이 일어날 수 있습니다. 그러니 스크립트 수정이 필요하면
말씀 하시고 하셔야 합니다!
만약 서로 다른 스크립트를 수정하고 있다면 그건 괜찮습니다. 

3. 유니티 씬도 스크립트랑 비슷할겁니다. 그러니 씬 수정도 말씀 하시고 하셔야 합니다! 
